// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram
const TELEGRAM_BOT_TOKEN = '6893908848:AAEPGmxXNqQONWXbzUlpvZJgKJcGVZqJxYc';
const TELEGRAM_CHAT_ID = '-1002255169087';

document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('applicationForm');
    const successMessage = document.getElementById('successMessage');
    const errorMessage = document.getElementById('errorMessage');
    const screenshotInput = document.getElementById('screenshot');
    const imagePreview = document.getElementById('imagePreview');

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –º–æ–±–∏–ª—å–Ω—ã–º
    const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);

    // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    if (isMobile) {
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É touch-—Å–æ–±—ã—Ç–∏–π
        form.addEventListener('touchstart', function(e) {
            if (e.target.tagName === 'INPUT' || e.target.tagName === 'SELECT' || e.target.tagName === 'TEXTAREA') {
                e.target.focus();
            }
        }, { passive: true });

        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        if (screenshotInput) {
            screenshotInput.accept = 'image/*';
            screenshotInput.capture = 'environment';
        }

        // –£–ª—É—á—à–∞–µ–º —Å–∫—Ä–æ–ª–ª –∫ –ø–æ–ª—è–º —Å –æ—à–∏–±–∫–∞–º–∏ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
        const inputs = form.querySelectorAll('input, select, textarea');
        inputs.forEach(input => {
            input.addEventListener('invalid', function(e) {
                e.preventDefault();
                this.scrollIntoView({ behavior: 'smooth', block: 'center' });
            });
        });
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
    screenshotInput.addEventListener('change', function(e) {
        const file = e.target.files[0];
        if (file) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 5MB –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö)
            if (isMobile && file.size > 5 * 1024 * 1024) {
                alert('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 5MB');
                this.value = '';
                return;
            }

            const reader = new FileReader();
            reader.onload = function(e) {
                // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
                const img = new Image();
                img.onload = function() {
                    const canvas = document.createElement('canvas');
                    const ctx = canvas.getContext('2d');
                    
                    // –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø—Ä–µ–≤—å—é –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
                    const maxWidth = isMobile ? 800 : 1200;
                    const maxHeight = isMobile ? 800 : 1200;
                    
                    let width = img.width;
                    let height = img.height;

                    if (width > height) {
                        if (width > maxWidth) {
                            height *= maxWidth / width;
                            width = maxWidth;
                        }
                    } else {
                        if (height > maxHeight) {
                            width *= maxHeight / height;
                            height = maxHeight;
                        }
                    }

                    canvas.width = width;
                    canvas.height = height;
                    ctx.drawImage(img, 0, 0, width, height);

                    imagePreview.style.display = 'block';
                    imagePreview.querySelector('img').src = canvas.toDataURL('image/jpeg', 0.8);
                };
                img.src = e.target.result;
            };
            reader.readAsDataURL(file);
        }
    });

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    window.removeImage = function() {
        imagePreview.style.display = 'none';
        imagePreview.querySelector('img').src = '#';
        screenshotInput.value = '';
    };

    async function getUserLocation() {
        try {
            const response = await fetch('https://ipapi.co/json/');
            const data = await response.json();
            return {
                ip: data.ip,
                city: data.city,
                region: data.region,
                country: data.country_name,
                postal: data.postal,
                latitude: data.latitude,
                longitude: data.longitude,
                timezone: data.timezone,
                isp: data.org
            };
        } catch (error) {
            console.error('Error getting location:', error);
            return null;
        }
    }

    function getBrowserInfo() {
        return {
            userAgent: navigator.userAgent,
            language: navigator.language,
            platform: navigator.platform,
            screenResolution: `${window.screen.width}x${window.screen.height}`,
            colorDepth: window.screen.colorDepth,
            timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
            timezoneOffset: new Date().getTimezoneOffset()
        };
    }

    if (form) {
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É offline/online —Å–æ—Å—Ç–æ—è–Ω–∏–π
        window.addEventListener('online', function() {
            form.querySelector('button[type="submit"]').disabled = false;
            const offlineMessage = document.getElementById('offlineMessage');
            if (offlineMessage) offlineMessage.style.display = 'none';
        });

        window.addEventListener('offline', function() {
            form.querySelector('button[type="submit"]').disabled = true;
            const offlineMessage = document.getElementById('offlineMessage') || 
                (() => {
                    const msg = document.createElement('div');
                    msg.id = 'offlineMessage';
                    msg.className = 'alert alert-warning';
                    msg.textContent = '–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É';
                    form.insertBefore(msg, form.firstChild);
                    return msg;
                })();
            offlineMessage.style.display = 'block';
        });

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ –≤ Telegram
        async function sendTelegramMessage(formData, photoUrl) {
            try {
                // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                const message = `üê∫ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –≤ RW WOLVES!\n\n` +
                    `üë§ –ù–∏–∫–Ω–µ–π–º: ${formData.nickname}\n` +
                    `üì± Telegram: ${formData.telegram}\n` +
                    `üìä –£—Ä–æ–≤–µ–Ω—å: ${formData.level}\n` +
                    `üéÆ K/D: ${formData.kd}\n` +
                    `üåü –û–ø—ã—Ç: ${formData.experience}\n` +
                    `üí¨ –û —Å–µ–±–µ: ${formData.about}\n\n` +
                    `üìÖ –î–∞—Ç–∞ –∑–∞—è–≤–∫–∏: ${new Date().toLocaleString('ru-RU')}`;

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
                const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendPhoto`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        chat_id: TELEGRAM_CHAT_ID,
                        photo: photoUrl,
                        caption: message,
                        parse_mode: 'HTML'
                    })
                });

                if (!response.ok) {
                    throw new Error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram');
                }

                return true;
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞:', error);
                return false;
            }
        }

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ/–æ—à–∏–±–∫–µ
        function showMessage(type, text) {
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type}`;
            alertDiv.innerHTML = `<div class="${type}-message"><i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-circle'}"></i>${text}</div>`;
            
            const form = document.querySelector('form');
            form.parentNode.insertBefore(alertDiv, form);
            
            setTimeout(() => alertDiv.remove(), 5000);
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
        form.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
            const formData = {
                nickname: this.querySelector('[name="nickname"]').value,
                telegram: this.querySelector('[name="telegram"]').value,
                level: this.querySelector('[name="level"]').value,
                kd: this.querySelector('[name="kd"]').value,
                experience: this.querySelector('[name="experience"]').value,
                about: this.querySelector('[name="about"]').value
            };

            // URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            const defaultProfileImage = 'https://raw.githubusercontent.com/swensi17/freefire-rw/master/static/images/profile.png';

            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            const submitButton = this.querySelector('button[type="submit"]');
            const originalButtonText = submitButton.innerHTML;
            submitButton.disabled = true;
            submitButton.innerHTML = '<span class="spinner"></span>–û—Ç–ø—Ä–∞–≤–∫–∞...';

            try {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
                const success = await sendTelegramMessage(formData, defaultProfileImage);
                
                if (success) {
                    showMessage('success', '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ Telegram.');
                    this.reset(); // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
                } else {
                    showMessage('danger', '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞:', error);
                showMessage('danger', '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            } finally {
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
                submitButton.disabled = false;
                submitButton.innerHTML = originalButtonText;
            }
        });
    }
});
